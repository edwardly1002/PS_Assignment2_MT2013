q()
dá»‰
dir
d:
wdeq
xlsx::read.xlsx
aaa = c(4 , 5L , 4 + 2i)
aaa
aaa = c(4 , 5L , 4 + 2i)
aaa = c(4 , "Nani" , 4 + 2i)
aaa = c(4 , "Nani" , c(1,2,3))
aaa
list = (aaa,5,6)
list = (aaa)
list = list(aaa,5,6)
lisr
list
bbb = c(aaa,5,"FFF")
bbb
bbb = c(list,5,"FFF")
bbb
v = LETTERS[1:6]
v
t <- c("Sun","Mon","Tue","Wed","Thurs","Fri","Sat")
u <- t[c(2,3,6)]
print(u)
v <- t[c(TRUE,FALSE,FALSE,FALSE,FALSE,TRUE,FALSE)]
print(v)
x <- t[c(-2,-5)]
print(x)
y <- t[c(0,0,0,0,0,0,1)]
print(y)
y <- t[c(0,0,1,0,0,0,1)]
print(y)
y <- t[c(0,0,0,0,0,0,0)]
print(y)
y <- t[c(0,0,1,0,0,0,0)]
print(y)
y <- t[c(0,1,1,0,0,0,0)]
print(y)
y <- t[c(1,1,1,0,0,0,0)]
print(y)
clear
# Create two vectors of different lengths.
vector1 <- c(5,9,3)
vector2 <- c(10,11,12,13,14,15)
# Take these vectors as input to the array.
array1 <- array(c(vector1,vector2),dim = c(3,3,2))
# Create two vectors of different lengths.
vector3 <- c(9,1,0)
vector4 <- c(6,0,11,3,14,1,2,6,9)
array2 <- array(c(vector1,vector2),dim = c(3,3,2))
# create matrices from these arrays.
matrix1 <- array1[,,2]
matrix2 <- array2[,,2]
# Add the matrices.
result <- matrix1+matrix2
print(result)
array1
array2
# Create two vectors of different lengths.
vector1 <- c(5,9,3)
vector2 <- c(10,11,12,13,14,15)
# Take these vectors as input to the array.
array1 <- array(c(vector1,vector2),dim = c(3,3,2))
# Create two vectors of different lengths.
vector3 <- c(9,1,0)
vector4 <- c(6,0,11,3,14,1,2,6,9)
array2 <- array(c(vector3,vector4),dim = c(3,3,2))
# create matrices from these arrays.
matrix1 <- array1[,,2]
matrix2 <- array2[,,2]
# Add the matrices.
result <- matrix1+matrix2
print(result)
array2
.libsPaths
.libsPath
.libsPath()
libPaths()
install.packages(tidyverse)
install.packages("tidyverse")
q()
dir
cd ..
# 2.b) Finding lowest-score
lowest_score = min(DataChart$Points_5.00);
sum_all = function(data_col,data_size) {
all_score = 0;
for(i in 1:data_size)
{
all_score = all_score + (data_col[i]);
};
return (all_score);
}
get_data = function(tid) {
data = xlsx::read.xlsx("05.xlsx", sheetName = "CO1007_003045_DH_HK192 Quiz 19" ,stringsAsFactors = FALSE);
return(data);
}
solve_1 = function(data) {
print(nrow(data));
return(nrow(data));
}
#Get data
DataChart = get_data();
colnames(DataChart) = c("uid","State","Start", "End", "Duration", "Points_5.00", "Q1_1.00", "Q2_1.00", "Q3_1.00", "Q4_1.00", "Q5_1.00");
#Question 1
nrow_data = solve_1(DataChart);
install.packages("tidyverse")
install.packages("utf8")
install.packages("xlsx")
q()
install.packages("e1071")
q()
q()
library(stats)
library(dplyr)
library(magrittr)
#1,2
df = read.csv('gia_nha.csv');
new_DF = df %>% select('price', 'sqft_living15', 'floors','condition','sqft_above','sqft_living');
new_DF = new_DF %>% filter(!(is.na(price) | is.na(sqft_living15) | is.na(sqft_living) | is.na(floors) | is.na(condition) | is.na(sqft_above)));
new_DF = new_DF %>% rename('log(price)'=price, 'log(sqft_living15)'=sqft_living15, 'log(sqft_living)'=sqft_living, 'log(sqft_above)'=sqft_above);
#3
#a)
Log = function(x) {log(x)};
new_DF = data.frame(new_DF %>% select('floors','condition'), apply(new_DF %>% select('log(price)', 'log(sqft_living15)','log(sqft_living)','log(sqft_above)'),2,Log));
print(new_DF);
#b)colMeans(new_DF[,c(3:6)]);
table = data.frame(Name = c('mean','median','sd','min','max'),
log.price.= c(mean(new_DF[,'log.price.']), median(new_DF[,'log.price.']),sd(new_DF[,'log.price.']),min(new_DF[,'log.price.']),max(new_DF[,'log.price.'])),
log.sqft_living15.= c(mean(new_DF[,'log.sqft_living15.']), median(new_DF[,'log.sqft_living15.']),sd(new_DF[,'log.sqft_living15.']),min(new_DF[,'log.sqft_living15.']),max(new_DF[,'log.sqft_living15.'])),
log.sqft_living.= c(mean(new_DF[,'log.sqft_living.']), median(new_DF[,'log.sqft_living.']),sd(new_DF[,'log.sqft_living.']),min(new_DF[,'log.sqft_living.']),max(new_DF[,'log.sqft_living.'])),
log.sqft_above.= c(mean(new_DF[,'log.sqft_above.']), median(new_DF[,'log.sqft_above.']),sd(new_DF[,'log.sqft_above.']),min(new_DF[,'log.sqft_above.']),max(new_DF[,'log.sqft_above.']))
)
#c)
ftable(new_DF[,'floors'])
ftable(new_DF[,'condition'])
#d)
#hist(new_DF[,'log.price.'],freq=FALSE, probability = TRUE)
P = ecdf(new_DF[,'log.price.']);
plot(P)
#e) Not sure
pairs(new_DF[,c('floors','log.price.')])
pairs(new_DF[,c('condition','log.price.')])
#f)
pairs(new_DF[,c('log.sqft_living15.','log.price.')])
pairs(new_DF[,c('log.sqft_living.','log.price.')])
pairs(new_DF[,c('log.sqft_above.','log.price.')])
#4
#a)
lmPrice = lm(log.price.~log.sqft_living15.+log.sqft_living.+log.sqft_above.+floors+condition,new_DF)
summary(lmPrice)
#plot(new_DF)
#abline(lmPrice)
setwd("D:/Computer Science HMCUT/Statistic Probability/R BTL2/PS_Assignment2_MT2013")
library(stats)
library(dplyr)
library(magrittr)
#1,2
df = read.csv('gia_nha.csv');
new_DF = df %>% select('price', 'sqft_living15', 'floors','condition','sqft_above','sqft_living');
new_DF = new_DF %>% filter(!(is.na(price) | is.na(sqft_living15) | is.na(sqft_living) | is.na(floors) | is.na(condition) | is.na(sqft_above)));
new_DF = new_DF %>% rename('log(price)'=price, 'log(sqft_living15)'=sqft_living15, 'log(sqft_living)'=sqft_living, 'log(sqft_above)'=sqft_above);
#3
#a)
Log = function(x) {log(x)};
new_DF = data.frame(new_DF %>% select('floors','condition'), apply(new_DF %>% select('log(price)', 'log(sqft_living15)','log(sqft_living)','log(sqft_above)'),2,Log));
print(new_DF);
#b)colMeans(new_DF[,c(3:6)]);
table = data.frame(Name = c('mean','median','sd','min','max'),
log.price.= c(mean(new_DF[,'log.price.']), median(new_DF[,'log.price.']),sd(new_DF[,'log.price.']),min(new_DF[,'log.price.']),max(new_DF[,'log.price.'])),
log.sqft_living15.= c(mean(new_DF[,'log.sqft_living15.']), median(new_DF[,'log.sqft_living15.']),sd(new_DF[,'log.sqft_living15.']),min(new_DF[,'log.sqft_living15.']),max(new_DF[,'log.sqft_living15.'])),
log.sqft_living.= c(mean(new_DF[,'log.sqft_living.']), median(new_DF[,'log.sqft_living.']),sd(new_DF[,'log.sqft_living.']),min(new_DF[,'log.sqft_living.']),max(new_DF[,'log.sqft_living.'])),
log.sqft_above.= c(mean(new_DF[,'log.sqft_above.']), median(new_DF[,'log.sqft_above.']),sd(new_DF[,'log.sqft_above.']),min(new_DF[,'log.sqft_above.']),max(new_DF[,'log.sqft_above.']))
)
#c)
ftable(new_DF[,'floors'])
ftable(new_DF[,'condition'])
#d)
#hist(new_DF[,'log.price.'],freq=FALSE, probability = TRUE)
P = ecdf(new_DF[,'log.price.']);
plot(P)
#e) Not sure
pairs(new_DF[,c('floors','log.price.')])
pairs(new_DF[,c('condition','log.price.')])
#f)
pairs(new_DF[,c('log.sqft_living15.','log.price.')])
pairs(new_DF[,c('log.sqft_living.','log.price.')])
pairs(new_DF[,c('log.sqft_above.','log.price.')])
#4
#a)
lmPrice = lm(log.price.~log.sqft_living15.+log.sqft_living.+log.sqft_above.+floors+condition,new_DF)
summary(lmPrice)
#plot(new_DF)
#abline(lmPrice)
lmPricy = lm(log.price.~condition,new_DF[,c('log.price.','condition')])
summary(lmPricy)
plot(new_DF[,c('log.price.','condition')])
abline(lmPricy)
lmPricy = lm(log.price.~condition,new_DF[,c('log.price.','condition')])
summary(lmPricy)
plot(new_DF[,c('condition','log.price.')])
abline(lmPricy)
#c)
lmPriceC = lm(log.price.~log.sqft_living15.+log.sqft_living.+log.sqft_above.+floors,new_DF)
summary(lmPriceC)
#4
#a)
lmPrice = lm(log.price.~log.sqft_living15.+log.sqft_living.+log.sqft_above.+floors+condition,new_DF)
summary(lmPrice)
#c)
lmPriceC = lm(log.price.~log.sqft_living15.+log.sqft_living.+log.sqft_above.+floors,new_DF)
summary(lmPriceC)
#d)
anovaD = anova(log.price.~condition,new_DF)
View(lmPrice)
View(lmPriceC)
#d)
anovaD = anova(new_DF[, c('log.price.','condition')])
#d)
anovaD = anova(new_DF[,'log.price.'], new_DF[,'condition'])
#d)
lmPricy = lm(log.price.~condition,new_DF[,c('log.price.','condition')])
summary(lmPricy)
plot(new_DF[,c('condition','log.price.')])
abline(lmPricy)
anovaD = anova(new_DF[,'log.price.'], new_DF[,'condition'])
#d)
lmPricy = lm(log.price.~condition,new_DF[,c('log.price.','condition')])
summary(lmPricy)
plot(new_DF[,c('condition','log.price.')])
abline(lmPricy)
anovaD = anova(lmPricy)
library(stats)
library(dplyr)
library(magrittr)
#1,2
df = read.csv('gia_nha.csv');
new_DF = df %>% select('price', 'sqft_living15', 'floors','condition','sqft_above','sqft_living');
new_DF = new_DF %>% filter(!(is.na(price) | is.na(sqft_living15) | is.na(sqft_living) | is.na(floors) | is.na(condition) | is.na(sqft_above)));
new_DF = new_DF %>% rename('log(price)'=price, 'log(sqft_living15)'=sqft_living15, 'log(sqft_living)'=sqft_living, 'log(sqft_above)'=sqft_above);
#3
#a)
Log = function(x) {log(x)};
new_DF = data.frame(new_DF %>% select('floors','condition'), apply(new_DF %>% select('log(price)', 'log(sqft_living15)','log(sqft_living)','log(sqft_above)'),2,Log));
print(new_DF);
#b)colMeans(new_DF[,c(3:6)]);
table = data.frame(Name = c('mean','median','sd','min','max'),
log.price.= c(mean(new_DF[,'log.price.']), median(new_DF[,'log.price.']),sd(new_DF[,'log.price.']),min(new_DF[,'log.price.']),max(new_DF[,'log.price.'])),
log.sqft_living15.= c(mean(new_DF[,'log.sqft_living15.']), median(new_DF[,'log.sqft_living15.']),sd(new_DF[,'log.sqft_living15.']),min(new_DF[,'log.sqft_living15.']),max(new_DF[,'log.sqft_living15.'])),
log.sqft_living.= c(mean(new_DF[,'log.sqft_living.']), median(new_DF[,'log.sqft_living.']),sd(new_DF[,'log.sqft_living.']),min(new_DF[,'log.sqft_living.']),max(new_DF[,'log.sqft_living.'])),
log.sqft_above.= c(mean(new_DF[,'log.sqft_above.']), median(new_DF[,'log.sqft_above.']),sd(new_DF[,'log.sqft_above.']),min(new_DF[,'log.sqft_above.']),max(new_DF[,'log.sqft_above.']))
)
#c)
ftable(new_DF[,'floors'])
ftable(new_DF[,'condition'])
#d)
#hist(new_DF[,'log.price.'],freq=FALSE, probability = TRUE)
P = ecdf(new_DF[,'log.price.']);
plot(P)
#e) Not sure
pairs(new_DF[,c('floors','log.price.')])
pairs(new_DF[,c('condition','log.price.')])
#f)
pairs(new_DF[,c('log.sqft_living15.','log.price.')])
pairs(new_DF[,c('log.sqft_living.','log.price.')])
pairs(new_DF[,c('log.sqft_above.','log.price.')])
#4
#a)
lmPrice = lm(log.price.~log.sqft_living15.+log.sqft_living.+log.sqft_above.+floors+condition,new_DF)
summary(lmPrice)
#plot(new_DF)
#abline(lmPrice)
#b)
#Eliminate floors condition sign 0.1 1 (>0.05)
#lmPricy = lm(log.price.~condition,new_DF[,c('log.price.','condition')])
#summary(lmPricy)
#plot(new_DF[,c('condition','log.price.')])
#abline(lmPricy)
#c)
lmPriceC = lm(log.price.~log.sqft_living15.+log.sqft_living.+log.sqft_above.+floors,new_DF)
summary(lmPriceC)
#d)
lmPricy = lm(log.price.~condition,new_DF[,c('log.price.','condition')])
summary(lmPricy)
anovaD = anova(lmPricy)
anovaD
lmPrici = lm(log.price.~log.sqft_living15.,new_DF[,c('log.price.','log.sqft_living15.')])
summary(lmPrici)
anovai = anova(lmPrici)
anovai
#d)
lmPricy = lm(log.price.~condition,new_DF[,c('log.price.','condition')])
#summary(lmPricy)
anovaD = anova(lmPricy)
anovaD
lmPrici = lm(log.price.~log.sqft_living15.,new_DF[,c('log.price.','log.sqft_living15.')])
#summary(lmPrici)
anovai = anova(lmPrici)
anovai
#c)
lmPriceC = lm(log.price.~log.sqft_living15.+log.sqft_living.+log.sqft_above.+floors,new_DF)
summary(lmPriceC)
View(lmPriceC)
View(lmPriceC)
View(lmPriceC)
#e)
plot(lmPriceC['residuals'])
#e)
(lmPriceC['residuals'])
#e)
plot(lmPriceC[, c('residuals','fitted.values')])
#e)
plot(lmPriceC['residuals'], lmPriceC['fitted.values'])
#e)
plot(lmPriceC['residuals',1], lmPriceC['fitted.values',1])
#e)
plot(lmPriceC[, 'residuals'], lmPriceC[, 'fitted.values'])
#e)
plot(lmPriceC['residuals'][1], lmPriceC['fitted.values'][1])
lmPriceC['residuals']
#e)
#e)
plot(c(lmPriceC['residuals']), c(lmPriceC['fitted.values']))
#e)
plot(lmPriceC['residuals'])
#e)
col(lmPriceC['residuals'])
#e)
#plot(lmPriceC['residuals'])
resi = as.numeric(lmPriceC['residuals'])
unlist(lmPriceC['residuals'])
unlist(lmPriceC['residuals',])
unlist(lmPriceC['residuals',2])
unlist(lmPriceC['residuals'][2])
unlist(lmPriceC['residuals'][1])
unlist(lmPriceC['residuals'][0])
unlist(lmPriceC['residuals',c(',2')])
unlist(lmPriceC['residuals',c(,2)])
unlist(lmPriceC['residuals',c(2)])
unlist(lmPriceC['residuals'][1,2])
unlist(lmPriceC['residuals'][1][2])
unlist(lmPriceC['residuals'][1:2])
unlist(lmPriceC['residuals'][:,2])
unlist(lmPriceC['residuals'][1:20593,2])
t(unlist(lmPriceC['residuals']))
t(unlist(lmPriceC['residuals'][2]))
t(unlist(lmPriceC['residuals']))[2]
t(unlist(lmPriceC['residuals']))[:2]
t(unlist(lmPriceC['residuals']))[2,]
t(unlist(lmPriceC['residuals']))[,2]
unlist(lmPriceC['residuals'][,"names"])
residuals(lmPriceC)
unlist(lmPriceC['residuals'][*,"names"])
as.numeric(lmPriceC['residuals'])
as.numeric(lmPriceC$coefficients['residuals'])
as.numeric(lmPriceC$coefficients)
as.numeric(lmPriceC$residuals)
#e)
resi = lmPriceC$residuals
fitted = lmPriceC$fitted.values
plot(resi, fitted)
#5)
table[log.price.,mean]
#5)
table[log.price.]['mean']
#5)
table['log.price.']['mean']
#5)
table['mean'][log.price.]
#5)
table[,'mean'][log.price.]
#5)
table['mean']
